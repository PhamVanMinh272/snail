AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Snail

  Sample SAM Template for test-lambda-minh

Globals:
  Function:
    Timeout: 20
    MemorySize: 128
    Runtime: python3.11
    Environment:
      Variables:
        ENV: aws
    LoggingConfig:
      LogFormat: JSON
Resources:
  ProductsS3:
    Type: AWS::S3::Bucket
    "Properties": {
      BucketName: snail-minh
    }

  ProductsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
#                Resource: !Sub '${ProductsS3.Arn}/*'
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ApiDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev

  DefaultCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: DefaultCachePolicy
        DefaultTTL: 3600
        MinTTL: 0
        MaxTTL: 86400
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none  # Or 'whitelist', and specify headers if needed
          CookiesConfig:
            CookieBehavior: none  # Or 'whitelist', and specify cookies if needed
          QueryStringsConfig:
            QueryStringBehavior: all  # Or 'whitelist', and specify query strings

  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true  # Enabled should be defined here
        Origins:
          - DomainName: !Sub '${ApiDeployment}.execute-api.${AWS::Region}.amazonaws.com'
            Id: ApiOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: ApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref DefaultCachePolicy  # Replace with a valid Cache Policy ID
          AllowedMethods:
            - GET
            - HEAD

  SwaggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./swagger
      Handler: main.lambda_handler
      Architectures:
        - x86_64
      Events:
        SwaggerGet:
          Type: Api
          Properties:
            Path: /swagger-ui
            Method: get
            RestApiId: !Ref ApiDeployment

  ProductsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt ProductsFunctionRole.Arn
      CodeUri: ./
      Handler: src/functions/products.lambda_handler
      Architectures:
      - x86_64
      Events:
        getProducts:
          Type: Api
          Properties:
            Path: /products
            Method: get
            RestApiId: !Ref ApiDeployment
        getDetailProduct:
          Type: Api
          Properties:
            Path: /products/{productId}
            Method: get
            RestApiId: !Ref ApiDeployment
        postProducts:
          Type: Api
          Properties:
            Path: /products
            Method: post
            RestApiId: !Ref ApiDeployment
        postUploadImg:
          Type: Api
          Properties:
            Path: /products/{productId}/upload-img
            Method: post
            RestApiId: !Ref ApiDeployment
        putProducts:
          Type: Api
          Properties:
            Path: /products/{productId}
            Method: put
            RestApiId: !Ref ApiDeployment
        getBrands:
          Type: Api
          Properties:
            Path: /products/brands
            Method: get
            RestApiId: !Ref ApiDeployment

  CategoriesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt ProductsFunctionRole.Arn
      CodeUri: ./
      Handler: src/functions/categories.lambda_handler
      Architectures:
        - x86_64
      Events:
        getCategories:
          Type: Api
          Properties:
            Path: /categories
            Method: get
            RestApiId: !Ref ApiDeployment
        getDetailCategory:
          Type: Api
          Properties:
            Path: /categories/{categoryId}
            Method: get
            RestApiId: !Ref ApiDeployment
        postCategories:
          Type: Api
          Properties:
            Path: /categories
            Method: post
            RestApiId: !Ref ApiDeployment
        putCategories:
          Type: Api
          Properties:
            Path: /categories/{categoryId}
            Method: put
            RestApiId: !Ref ApiDeployment
        getCategoryFilters:
          Type: Api
          Properties:
            Path: /categories/{categoryId}/filters
            Method: get
            RestApiId: !Ref ApiDeployment

  ImagesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt ProductsFunctionRole.Arn
      CodeUri: ./
      Handler: src/functions/images.lambda_handler
      Architectures:
        - x86_64
      Events:
        getImage:
          Type: Api
          Properties:
            Path: /images/by-name/{imageName}
            Method: get
            RestApiId: !Ref ApiDeployment
        deleteImage:
          Type: Api
          Properties:
            Path: /images/{imageId}
            Method: delete
            RestApiId: !Ref ApiDeployment

  MatchesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt ProductsFunctionRole.Arn
      CodeUri: ./
      Handler: src/functions/matches.lambda_handler
      Architectures:
        - x86_64
      Events:
        getMatches:
          Type: Api
          Properties:
            Path: /matches
            Method: get
            RestApiId: !Ref ApiDeployment
        postMatch:
          Type: Api
          Properties:
            Path: /matches
            Method: post
            RestApiId: !Ref ApiDeployment
        postMatchRegister:
          Type: Api
          Properties:
            Path: /matches/{matchId}/register
            Method: post
            RestApiId: !Ref ApiDeployment

  PlayersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt ProductsFunctionRole.Arn
      CodeUri: ./
      Handler: src/functions/players.lambda_handler
      Architectures:
        - x86_64
      Events:
        getPlayers:
          Type: Api
          Properties:
            Path: /players
            Method: get
            RestApiId: !Ref ApiDeployment






#  ProductsFunctionPolicy:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: lambda:InvokeFunction
#      FunctionName: !GetAtt ProductsFunction.Arn
#      Principal: s3.amazonaws.com
#      SourceArn: !GetAttr ProductsS3.Arn
